version: '3.6'

# Define named volumes for persistent data
volumes:
  apache-airflow_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  mongo_data:
    driver: local
  minio-data-1:
    driver: local
  minio-data-2:
    driver: local
  minio-data-3:
    driver: local

# Define a custom network for services to communicate
networks:
  lyric_wave_network:

services:

  lyric_wave_minio1:
    image: minio/minio
    container_name: lyric-wave-minio-1
    env_file:
      - .env
    volumes:
      - minio-data-1:/data
    command: server http://lyric-wave-minio-{1...3}/data
    networks:
      - lyric_wave_network

  lyric_wave_minio2:
    image: minio/minio
    container_name: lyric-wave-minio-2
    env_file:
      - .env
    volumes:
      - minio-data-2:/data
    command: server http://lyric-wave-minio-{1...3}/data
    networks:
      - lyric_wave_network

  lyric_wave_minio3:
    image: minio/minio
    container_name: lyric-wave-minio-3
    env_file:
      - .env
    volumes:
      - minio-data-3:/data
    command: server http://lyric-wave-minio-{1...3}/data
    networks:
      - lyric_wave_network

  lyric_wave_minio_haproxy:
    image: haproxytech/haproxy-alpine:2.7
    container_name: lyric-wave-minio-haproxy
    volumes:
      - ./haproxy/minio/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - '9000:9000'
      - '1936:1936'
    networks:
      - lyric_wave_network

  # MongoDB container for Apache Airflow
  lyric_wave_mongo:
    container_name: lyric-wave-mongo
    image: mongo
    env_file:
      - .env
    ports:
      - "27017:27017"
    networks:
      - lyric_wave_network

  # Web-based MongoDB admin interface, written with Node.js and express
  lyric_wave_mongo_express:
    image: mongo-express
    container_name: lyric-wave-mongo-express
    restart: on-failure
    env_file:
      - .env
    depends_on:
      - lyric_wave_mongo
    ports:
      - "8087:8081"
    networks:
      - lyric_wave_network

  # Redis container for Apache Airflow's message broker
  lyric_wave_redis:
    image: redis:5.0.5
    container_name: lyric-wave-redis
    restart: always
    networks:
      - lyric_wave_network
    
  # PostgreSQL database container for Apache Airflow
  lyric_wave_postgres:
    image: postgres:13
    container_name: lyric-wave-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - lyric_wave_network

  # pgAdmin container for managing the PostgreSQL database
  lyric_wave_pgadmin:
    image: dpage/pgadmin4
    container_name: lyric-wave-pgadmin
    restart: always
    env_file:
      - .env
    ports:
      - 8085:80
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    networks:
      - lyric_wave_network

  # Apache Airflow webserver container
  lyric_wave_airflow_webserver:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric-wave-airflow-webserver
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_postgres
      - lyric_wave_redis
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - lyric_wave_network

  # Flower is a web-based tool for monitoring and administrating Celery clusters.
  lyric_wave_celery_flower:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric-wave-celery-flower
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_redis
    ports:
      - "8081:5555"
      - "8082:8080"
      - "8083:8793"
    command: flower
    networks:
      - lyric_wave_network

  # Apache Airflow scheduler container
  lyric_wave_airflow_scheduler:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric-wave-airflow-scheduler
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_airflow_webserver
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    ports:
      - "8084:8080"
    command: scheduler
    networks:
      - lyric_wave_network

  # Apache Airflow worker containers
  lyric_wave_airflow_worker_1:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric-wave-airflow-worker-1
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_airflow_scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    command: worker
    networks:
      - lyric_wave_network

  # Apache Airflow worker containers
  lyric_wave_airflow_worker_2:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric-wave-airflow-worker-2
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_airflow_scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    command: worker
    networks:
      - lyric_wave_network

  # Lyric Wave API Song Generation API Service
  lyric_wave_song_generation_api_service_1:
    image: ssanchez11/lyric_wave_song_generation_api:0.0.1
    container_name: lyric-wave-song-generation-api-service-1
    restart: always
    env_file:
      - .env
    networks:
      - lyric_wave_network

  # Lyric Wave API Song Generation API Service
  lyric_wave_song_generation_api_service_2:
    image: ssanchez11/lyric_wave_song_generation_api:0.0.1
    container_name: lyric-wave-song-generation-api-service-2
    restart: always
    env_file:
      - .env
    networks:
      - lyric_wave_network

  # Lyric Wave API Song Generation API Service
  lyric_wave_song_generation_api_service_3:
    image: ssanchez11/lyric_wave_song_generation_api:0.0.1
    container_name: lyric-wave-song-generation-api-service-3
    restart: always
    env_file:
      - .env
    networks:
      - lyric_wave_network

  lyric_wave_song_generation_haproxy:
    image: haproxytech/haproxy-alpine:2.7
    container_name: lyric-wave-song-generation-haproxy
    volumes:
      - ./haproxy/song_generation/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - '8086:5000'
      - '1937:1936'
    networks:
      - lyric_wave_network