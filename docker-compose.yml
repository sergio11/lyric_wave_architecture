version: '3.6'

# Define named volumes for persistent data
volumes:
  apache-airflow_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  mongo_data:
    driver: local
  minio-data-1:
    driver: local
  minio-data-2:
    driver: local

# Define a custom network for services to communicate
networks:
  lyric_wave_network:

services:

  lyric_wave_minio1:
    image: minio/minio
    container_name: lyricwaveminio1
    env_file:
      - ./.env
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - minio-data-1:/data
    command: server http://lyricwaveminio{1...2}/data
    networks:
      - lyric_wave_network

  lyric_wave_minio2:
    image: minio/minio
    container_name: lyricwaveminio2
    env_file:
      - ./.env
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - minio-data-2:/data
    command: server http://lyricwaveminio{1...2}/data
    networks:
      - lyric_wave_network

  lyric_wave_minio_haproxy:
    image: haproxytech/haproxy-alpine:2.7
    container_name: lyric_wave_minio_haproxy
    volumes:
      - ./haproxy/minio/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - '9000:9000'
      - '1936:1936'
    networks:
      - lyric_wave_network

  # MongoDB container for Apache Airflow
  lyric_wave_mongo:
    container_name: lyric_wave_mongo
    image: mongo
    env_file:
      - .env
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB}
    networks:
      - lyric_wave_network

  # Web-based MongoDB admin interface, written with Node.js and express
  lyric_wave_mongo_express:
    image: mongo-express
    container_name: lyric_wave_mongo_express
    restart: on-failure
    env_file:
      - .env
    environment:
      - ME_CONFIG_MONGODB_SERVER=lyric_wave_mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
    depends_on:
      - lyric_wave_mongo
    ports:
      - "8087:8081"
    networks:
      - lyric_wave_network

  # Redis container for Apache Airflow's message broker
  lyric_wave_redis:
    image: redis:5.0.5
    container_name: lyric_wave_redis
    restart: always
    networks:
      - lyric_wave_network
    
  # PostgreSQL database container for Apache Airflow
  lyric_wave_postgres:
    image: postgres:13
    container_name: lyric_wave_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - lyric_wave_network

  # pgAdmin container for managing the PostgreSQL database
  lyric_wave_pgadmin:
    image: dpage/pgadmin4
    container_name: lyric_wave_pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    env_file:
      - .env
    ports:
      - 8085:80
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    networks:
      - lyric_wave_network

  # Apache Airflow webserver container
  lyric_wave_airflow_webserver:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric_wave_airflow_webserver
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_postgres
      - lyric_wave_redis
    environment:
      LOAD_EX: ${LOAD_EX}
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - lyric_wave_network

  # Flower is a web-based tool for monitoring and administrating Celery clusters.
  lyric_wave_celery_flower:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric_wave_celery_flower
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_redis
    environment:
      EXECUTOR: ${EXECUTOR}
    ports:
      - "8081:5555"
      - "8082:8080"
      - "8083:8793"
    command: flower
    networks:
      - lyric_wave_network

  # Apache Airflow scheduler container
  lyric_wave_airflow_scheduler:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric_wave_airflow_scheduler
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_airflow_webserver
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    environment:
      LOAD_EX: ${LOAD_EX}
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    ports:
      - "8084:8080"
    command: scheduler
    networks:
      - lyric_wave_network

  # Apache Airflow worker containers
  lyric_wave_airflow_worker_1:
    image: ssanchez11/lyric_wave_apache_airflow:0.0.1
    container_name: lyric_wave_airflow_worker_1
    restart: always
    env_file:
      - .env
    depends_on:
      - lyric_wave_airflow_scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
      - ./airflow/packages:/usr/local/airflow/packages
    environment:
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    command: worker
    networks:
      - lyric_wave_network

  lyric_wave_api_service_1:
    image: ssanchez11/lyric_wave_api:0.0.1
    container_name: lyric_wave_api_service_1
    restart: always
    env_file:
      - .env
    ports:
      - "8086:5000"
    networks:
      - lyric_wave_network