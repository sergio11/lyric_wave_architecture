version: '3.6'

volumes:
  apache-airflow_data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  mongo_data:
    driver: local

networks:
  airflow_network:

services:

  # MongoDB container
  mongo:
    container_name: mongo
    image: mongo:4
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - airflow_network

  redis:
    image: 'redis:5.0.5'
    container_name: airflow_broker
    restart: always
    networks:
      - airflow_network
    
  postgres:
    image: postgres:13
    container_name: airflow_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - airflow_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: airflow_db_ui
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    env_file:
      - .env
    ports:
      - 8085:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - airflow_network

  webserver:
    build: 
      context: ./airflow
    container_name: airflow_webserver
    restart: always
    env_file:
      - .env
    depends_on:
      - postgres
      - redis
    environment:
      LOAD_EX: ${LOAD_EX}
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - airflow_network

  ## Flower is a web based tool for monitoring and administrating Celery clusters.
  flower:
    build: 
      context: ./airflow
    container_name: airflow_flower
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
    environment:
      EXECUTOR: ${EXECUTOR}
    ports:
      - "8081:5555"
    command: flower
    networks:
      - airflow_network

  scheduler:
    build: 
      context: ./airflow
    container_name: airflow_scheduler
    restart: always
    env_file:
      - .env
    depends_on:
      - webserver
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    environment:
      LOAD_EX: ${LOAD_EX}
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    command: scheduler
    networks:
      - airflow_network

  worker:
    build: 
      context: ./airflow
    container_name: airflow_worker_1
    restart: always
    env_file:
      - .env
    depends_on:
      - scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    environment:
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    command: worker
    networks:
      - airflow_network

  worker_2:
    build: 
      context: ./airflow
    container_name: airflow_worker_2
    restart: always
    env_file:
      - .env
    depends_on:
      - scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    environment:
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    command: worker
    networks:
      - airflow_network

  worker_3:
    build: 
      context: ./airflow
    container_name: airflow_worker_3
    env_file:
      - .env
    restart: always
    depends_on:
      - scheduler
    volumes:
      - ./airflow/dags:/usr/local/airflow/dags
    environment:
      FERNET_KEY: ${FERNET_KEY}
      EXECUTOR: ${EXECUTOR}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      REDIS_HOST: ${REDIS_HOST}
    command: worker
    networks:
      - airflow_network
